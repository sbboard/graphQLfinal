module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCharacter {
  count: Int!
}

type AggregateMovements {
  count: Int!
}

type AggregateMoves {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Character {
  id: ID!
  name: String!
  displayName: String
  mainImgUrl: String
  thumbnailImg: String
  colorTheme: String
  moveInfo(where: MovesWhereInput, orderBy: MovesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Moves!]
  movementsInfo: Movements
}

type CharacterConnection {
  pageInfo: PageInfo!
  edges: [CharacterEdge]!
  aggregate: AggregateCharacter!
}

input CharacterCreateInput {
  name: String!
  displayName: String
  mainImgUrl: String
  thumbnailImg: String
  colorTheme: String
  moveInfo: MovesCreateManyWithoutUserInput
  movementsInfo: MovementsCreateOneWithoutUserInput
}

input CharacterCreateOneWithoutMoveInfoInput {
  create: CharacterCreateWithoutMoveInfoInput
  connect: CharacterWhereUniqueInput
}

input CharacterCreateOneWithoutMovementsInfoInput {
  create: CharacterCreateWithoutMovementsInfoInput
  connect: CharacterWhereUniqueInput
}

input CharacterCreateWithoutMoveInfoInput {
  name: String!
  displayName: String
  mainImgUrl: String
  thumbnailImg: String
  colorTheme: String
  movementsInfo: MovementsCreateOneWithoutUserInput
}

input CharacterCreateWithoutMovementsInfoInput {
  name: String!
  displayName: String
  mainImgUrl: String
  thumbnailImg: String
  colorTheme: String
  moveInfo: MovesCreateManyWithoutUserInput
}

type CharacterEdge {
  node: Character!
  cursor: String!
}

enum CharacterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  displayName_ASC
  displayName_DESC
  mainImgUrl_ASC
  mainImgUrl_DESC
  thumbnailImg_ASC
  thumbnailImg_DESC
  colorTheme_ASC
  colorTheme_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CharacterPreviousValues {
  id: ID!
  name: String!
  displayName: String
  mainImgUrl: String
  thumbnailImg: String
  colorTheme: String
}

type CharacterSubscriptionPayload {
  mutation: MutationType!
  node: Character
  updatedFields: [String!]
  previousValues: CharacterPreviousValues
}

input CharacterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CharacterWhereInput
  AND: [CharacterSubscriptionWhereInput!]
  OR: [CharacterSubscriptionWhereInput!]
  NOT: [CharacterSubscriptionWhereInput!]
}

input CharacterUpdateInput {
  name: String
  displayName: String
  mainImgUrl: String
  thumbnailImg: String
  colorTheme: String
  moveInfo: MovesUpdateManyWithoutUserInput
  movementsInfo: MovementsUpdateOneWithoutUserInput
}

input CharacterUpdateManyMutationInput {
  name: String
  displayName: String
  mainImgUrl: String
  thumbnailImg: String
  colorTheme: String
}

input CharacterUpdateOneRequiredWithoutMoveInfoInput {
  create: CharacterCreateWithoutMoveInfoInput
  update: CharacterUpdateWithoutMoveInfoDataInput
  upsert: CharacterUpsertWithoutMoveInfoInput
  connect: CharacterWhereUniqueInput
}

input CharacterUpdateOneRequiredWithoutMovementsInfoInput {
  create: CharacterCreateWithoutMovementsInfoInput
  update: CharacterUpdateWithoutMovementsInfoDataInput
  upsert: CharacterUpsertWithoutMovementsInfoInput
  connect: CharacterWhereUniqueInput
}

input CharacterUpdateWithoutMoveInfoDataInput {
  name: String
  displayName: String
  mainImgUrl: String
  thumbnailImg: String
  colorTheme: String
  movementsInfo: MovementsUpdateOneWithoutUserInput
}

input CharacterUpdateWithoutMovementsInfoDataInput {
  name: String
  displayName: String
  mainImgUrl: String
  thumbnailImg: String
  colorTheme: String
  moveInfo: MovesUpdateManyWithoutUserInput
}

input CharacterUpsertWithoutMoveInfoInput {
  update: CharacterUpdateWithoutMoveInfoDataInput!
  create: CharacterCreateWithoutMoveInfoInput!
}

input CharacterUpsertWithoutMovementsInfoInput {
  update: CharacterUpdateWithoutMovementsInfoDataInput!
  create: CharacterCreateWithoutMovementsInfoInput!
}

input CharacterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  mainImgUrl: String
  mainImgUrl_not: String
  mainImgUrl_in: [String!]
  mainImgUrl_not_in: [String!]
  mainImgUrl_lt: String
  mainImgUrl_lte: String
  mainImgUrl_gt: String
  mainImgUrl_gte: String
  mainImgUrl_contains: String
  mainImgUrl_not_contains: String
  mainImgUrl_starts_with: String
  mainImgUrl_not_starts_with: String
  mainImgUrl_ends_with: String
  mainImgUrl_not_ends_with: String
  thumbnailImg: String
  thumbnailImg_not: String
  thumbnailImg_in: [String!]
  thumbnailImg_not_in: [String!]
  thumbnailImg_lt: String
  thumbnailImg_lte: String
  thumbnailImg_gt: String
  thumbnailImg_gte: String
  thumbnailImg_contains: String
  thumbnailImg_not_contains: String
  thumbnailImg_starts_with: String
  thumbnailImg_not_starts_with: String
  thumbnailImg_ends_with: String
  thumbnailImg_not_ends_with: String
  colorTheme: String
  colorTheme_not: String
  colorTheme_in: [String!]
  colorTheme_not_in: [String!]
  colorTheme_lt: String
  colorTheme_lte: String
  colorTheme_gt: String
  colorTheme_gte: String
  colorTheme_contains: String
  colorTheme_not_contains: String
  colorTheme_starts_with: String
  colorTheme_not_starts_with: String
  colorTheme_ends_with: String
  colorTheme_not_ends_with: String
  moveInfo_every: MovesWhereInput
  moveInfo_some: MovesWhereInput
  moveInfo_none: MovesWhereInput
  movementsInfo: MovementsWhereInput
  AND: [CharacterWhereInput!]
  OR: [CharacterWhereInput!]
  NOT: [CharacterWhereInput!]
}

input CharacterWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Movements {
  id: ID!
  user: Character!
  weight: Int
  maxJumps: Int
  runSpeed: Int
  wallJump: Boolean
  walkSpeed: Int
  wallCling: Boolean
  airSpeed: Int
  crawl: Boolean
  fallSpeed: Int
  tether: Boolean
  fastFallSpeed: Int
  jumpSquat: String
  airAcceleration: Int
  softLandingLag: String
  gravity: Int
  hardLandingLag: String
  shAirTime: String
  fhAirTime: String
}

type MovementsConnection {
  pageInfo: PageInfo!
  edges: [MovementsEdge]!
  aggregate: AggregateMovements!
}

input MovementsCreateInput {
  user: CharacterCreateOneWithoutMovementsInfoInput!
  weight: Int
  maxJumps: Int
  runSpeed: Int
  wallJump: Boolean
  walkSpeed: Int
  wallCling: Boolean
  airSpeed: Int
  crawl: Boolean
  fallSpeed: Int
  tether: Boolean
  fastFallSpeed: Int
  jumpSquat: String
  airAcceleration: Int
  softLandingLag: String
  gravity: Int
  hardLandingLag: String
  shAirTime: String
  fhAirTime: String
}

input MovementsCreateOneWithoutUserInput {
  create: MovementsCreateWithoutUserInput
  connect: MovementsWhereUniqueInput
}

input MovementsCreateWithoutUserInput {
  weight: Int
  maxJumps: Int
  runSpeed: Int
  wallJump: Boolean
  walkSpeed: Int
  wallCling: Boolean
  airSpeed: Int
  crawl: Boolean
  fallSpeed: Int
  tether: Boolean
  fastFallSpeed: Int
  jumpSquat: String
  airAcceleration: Int
  softLandingLag: String
  gravity: Int
  hardLandingLag: String
  shAirTime: String
  fhAirTime: String
}

type MovementsEdge {
  node: Movements!
  cursor: String!
}

enum MovementsOrderByInput {
  id_ASC
  id_DESC
  weight_ASC
  weight_DESC
  maxJumps_ASC
  maxJumps_DESC
  runSpeed_ASC
  runSpeed_DESC
  wallJump_ASC
  wallJump_DESC
  walkSpeed_ASC
  walkSpeed_DESC
  wallCling_ASC
  wallCling_DESC
  airSpeed_ASC
  airSpeed_DESC
  crawl_ASC
  crawl_DESC
  fallSpeed_ASC
  fallSpeed_DESC
  tether_ASC
  tether_DESC
  fastFallSpeed_ASC
  fastFallSpeed_DESC
  jumpSquat_ASC
  jumpSquat_DESC
  airAcceleration_ASC
  airAcceleration_DESC
  softLandingLag_ASC
  softLandingLag_DESC
  gravity_ASC
  gravity_DESC
  hardLandingLag_ASC
  hardLandingLag_DESC
  shAirTime_ASC
  shAirTime_DESC
  fhAirTime_ASC
  fhAirTime_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MovementsPreviousValues {
  id: ID!
  weight: Int
  maxJumps: Int
  runSpeed: Int
  wallJump: Boolean
  walkSpeed: Int
  wallCling: Boolean
  airSpeed: Int
  crawl: Boolean
  fallSpeed: Int
  tether: Boolean
  fastFallSpeed: Int
  jumpSquat: String
  airAcceleration: Int
  softLandingLag: String
  gravity: Int
  hardLandingLag: String
  shAirTime: String
  fhAirTime: String
}

type MovementsSubscriptionPayload {
  mutation: MutationType!
  node: Movements
  updatedFields: [String!]
  previousValues: MovementsPreviousValues
}

input MovementsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MovementsWhereInput
  AND: [MovementsSubscriptionWhereInput!]
  OR: [MovementsSubscriptionWhereInput!]
  NOT: [MovementsSubscriptionWhereInput!]
}

input MovementsUpdateInput {
  user: CharacterUpdateOneRequiredWithoutMovementsInfoInput
  weight: Int
  maxJumps: Int
  runSpeed: Int
  wallJump: Boolean
  walkSpeed: Int
  wallCling: Boolean
  airSpeed: Int
  crawl: Boolean
  fallSpeed: Int
  tether: Boolean
  fastFallSpeed: Int
  jumpSquat: String
  airAcceleration: Int
  softLandingLag: String
  gravity: Int
  hardLandingLag: String
  shAirTime: String
  fhAirTime: String
}

input MovementsUpdateManyMutationInput {
  weight: Int
  maxJumps: Int
  runSpeed: Int
  wallJump: Boolean
  walkSpeed: Int
  wallCling: Boolean
  airSpeed: Int
  crawl: Boolean
  fallSpeed: Int
  tether: Boolean
  fastFallSpeed: Int
  jumpSquat: String
  airAcceleration: Int
  softLandingLag: String
  gravity: Int
  hardLandingLag: String
  shAirTime: String
  fhAirTime: String
}

input MovementsUpdateOneWithoutUserInput {
  create: MovementsCreateWithoutUserInput
  update: MovementsUpdateWithoutUserDataInput
  upsert: MovementsUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: MovementsWhereUniqueInput
}

input MovementsUpdateWithoutUserDataInput {
  weight: Int
  maxJumps: Int
  runSpeed: Int
  wallJump: Boolean
  walkSpeed: Int
  wallCling: Boolean
  airSpeed: Int
  crawl: Boolean
  fallSpeed: Int
  tether: Boolean
  fastFallSpeed: Int
  jumpSquat: String
  airAcceleration: Int
  softLandingLag: String
  gravity: Int
  hardLandingLag: String
  shAirTime: String
  fhAirTime: String
}

input MovementsUpsertWithoutUserInput {
  update: MovementsUpdateWithoutUserDataInput!
  create: MovementsCreateWithoutUserInput!
}

input MovementsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: CharacterWhereInput
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  maxJumps: Int
  maxJumps_not: Int
  maxJumps_in: [Int!]
  maxJumps_not_in: [Int!]
  maxJumps_lt: Int
  maxJumps_lte: Int
  maxJumps_gt: Int
  maxJumps_gte: Int
  runSpeed: Int
  runSpeed_not: Int
  runSpeed_in: [Int!]
  runSpeed_not_in: [Int!]
  runSpeed_lt: Int
  runSpeed_lte: Int
  runSpeed_gt: Int
  runSpeed_gte: Int
  wallJump: Boolean
  wallJump_not: Boolean
  walkSpeed: Int
  walkSpeed_not: Int
  walkSpeed_in: [Int!]
  walkSpeed_not_in: [Int!]
  walkSpeed_lt: Int
  walkSpeed_lte: Int
  walkSpeed_gt: Int
  walkSpeed_gte: Int
  wallCling: Boolean
  wallCling_not: Boolean
  airSpeed: Int
  airSpeed_not: Int
  airSpeed_in: [Int!]
  airSpeed_not_in: [Int!]
  airSpeed_lt: Int
  airSpeed_lte: Int
  airSpeed_gt: Int
  airSpeed_gte: Int
  crawl: Boolean
  crawl_not: Boolean
  fallSpeed: Int
  fallSpeed_not: Int
  fallSpeed_in: [Int!]
  fallSpeed_not_in: [Int!]
  fallSpeed_lt: Int
  fallSpeed_lte: Int
  fallSpeed_gt: Int
  fallSpeed_gte: Int
  tether: Boolean
  tether_not: Boolean
  fastFallSpeed: Int
  fastFallSpeed_not: Int
  fastFallSpeed_in: [Int!]
  fastFallSpeed_not_in: [Int!]
  fastFallSpeed_lt: Int
  fastFallSpeed_lte: Int
  fastFallSpeed_gt: Int
  fastFallSpeed_gte: Int
  jumpSquat: String
  jumpSquat_not: String
  jumpSquat_in: [String!]
  jumpSquat_not_in: [String!]
  jumpSquat_lt: String
  jumpSquat_lte: String
  jumpSquat_gt: String
  jumpSquat_gte: String
  jumpSquat_contains: String
  jumpSquat_not_contains: String
  jumpSquat_starts_with: String
  jumpSquat_not_starts_with: String
  jumpSquat_ends_with: String
  jumpSquat_not_ends_with: String
  airAcceleration: Int
  airAcceleration_not: Int
  airAcceleration_in: [Int!]
  airAcceleration_not_in: [Int!]
  airAcceleration_lt: Int
  airAcceleration_lte: Int
  airAcceleration_gt: Int
  airAcceleration_gte: Int
  softLandingLag: String
  softLandingLag_not: String
  softLandingLag_in: [String!]
  softLandingLag_not_in: [String!]
  softLandingLag_lt: String
  softLandingLag_lte: String
  softLandingLag_gt: String
  softLandingLag_gte: String
  softLandingLag_contains: String
  softLandingLag_not_contains: String
  softLandingLag_starts_with: String
  softLandingLag_not_starts_with: String
  softLandingLag_ends_with: String
  softLandingLag_not_ends_with: String
  gravity: Int
  gravity_not: Int
  gravity_in: [Int!]
  gravity_not_in: [Int!]
  gravity_lt: Int
  gravity_lte: Int
  gravity_gt: Int
  gravity_gte: Int
  hardLandingLag: String
  hardLandingLag_not: String
  hardLandingLag_in: [String!]
  hardLandingLag_not_in: [String!]
  hardLandingLag_lt: String
  hardLandingLag_lte: String
  hardLandingLag_gt: String
  hardLandingLag_gte: String
  hardLandingLag_contains: String
  hardLandingLag_not_contains: String
  hardLandingLag_starts_with: String
  hardLandingLag_not_starts_with: String
  hardLandingLag_ends_with: String
  hardLandingLag_not_ends_with: String
  shAirTime: String
  shAirTime_not: String
  shAirTime_in: [String!]
  shAirTime_not_in: [String!]
  shAirTime_lt: String
  shAirTime_lte: String
  shAirTime_gt: String
  shAirTime_gte: String
  shAirTime_contains: String
  shAirTime_not_contains: String
  shAirTime_starts_with: String
  shAirTime_not_starts_with: String
  shAirTime_ends_with: String
  shAirTime_not_ends_with: String
  fhAirTime: String
  fhAirTime_not: String
  fhAirTime_in: [String!]
  fhAirTime_not_in: [String!]
  fhAirTime_lt: String
  fhAirTime_lte: String
  fhAirTime_gt: String
  fhAirTime_gte: String
  fhAirTime_contains: String
  fhAirTime_not_contains: String
  fhAirTime_starts_with: String
  fhAirTime_not_starts_with: String
  fhAirTime_ends_with: String
  fhAirTime_not_ends_with: String
  AND: [MovementsWhereInput!]
  OR: [MovementsWhereInput!]
  NOT: [MovementsWhereInput!]
}

input MovementsWhereUniqueInput {
  id: ID
}

type Moves {
  id: ID!
  name: String!
  user: Character!
  hitBoxActive: String
  firstActionableFrame: Int
  baseDmg: Int
  angle: Int
  baseKnockBackSetKnockback: Int
  landingLag: Int
  autoCancel: String
  knockbackGrowth: Int
  moveType: String
  isWeightDependent: Boolean
}

type MovesConnection {
  pageInfo: PageInfo!
  edges: [MovesEdge]!
  aggregate: AggregateMoves!
}

input MovesCreateInput {
  name: String!
  user: CharacterCreateOneWithoutMoveInfoInput!
  hitBoxActive: String
  firstActionableFrame: Int
  baseDmg: Int
  angle: Int
  baseKnockBackSetKnockback: Int
  landingLag: Int
  autoCancel: String
  knockbackGrowth: Int
  moveType: String
  isWeightDependent: Boolean
}

input MovesCreateManyWithoutUserInput {
  create: [MovesCreateWithoutUserInput!]
  connect: [MovesWhereUniqueInput!]
}

input MovesCreateWithoutUserInput {
  name: String!
  hitBoxActive: String
  firstActionableFrame: Int
  baseDmg: Int
  angle: Int
  baseKnockBackSetKnockback: Int
  landingLag: Int
  autoCancel: String
  knockbackGrowth: Int
  moveType: String
  isWeightDependent: Boolean
}

type MovesEdge {
  node: Moves!
  cursor: String!
}

enum MovesOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  hitBoxActive_ASC
  hitBoxActive_DESC
  firstActionableFrame_ASC
  firstActionableFrame_DESC
  baseDmg_ASC
  baseDmg_DESC
  angle_ASC
  angle_DESC
  baseKnockBackSetKnockback_ASC
  baseKnockBackSetKnockback_DESC
  landingLag_ASC
  landingLag_DESC
  autoCancel_ASC
  autoCancel_DESC
  knockbackGrowth_ASC
  knockbackGrowth_DESC
  moveType_ASC
  moveType_DESC
  isWeightDependent_ASC
  isWeightDependent_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MovesPreviousValues {
  id: ID!
  name: String!
  hitBoxActive: String
  firstActionableFrame: Int
  baseDmg: Int
  angle: Int
  baseKnockBackSetKnockback: Int
  landingLag: Int
  autoCancel: String
  knockbackGrowth: Int
  moveType: String
  isWeightDependent: Boolean
}

input MovesScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  hitBoxActive: String
  hitBoxActive_not: String
  hitBoxActive_in: [String!]
  hitBoxActive_not_in: [String!]
  hitBoxActive_lt: String
  hitBoxActive_lte: String
  hitBoxActive_gt: String
  hitBoxActive_gte: String
  hitBoxActive_contains: String
  hitBoxActive_not_contains: String
  hitBoxActive_starts_with: String
  hitBoxActive_not_starts_with: String
  hitBoxActive_ends_with: String
  hitBoxActive_not_ends_with: String
  firstActionableFrame: Int
  firstActionableFrame_not: Int
  firstActionableFrame_in: [Int!]
  firstActionableFrame_not_in: [Int!]
  firstActionableFrame_lt: Int
  firstActionableFrame_lte: Int
  firstActionableFrame_gt: Int
  firstActionableFrame_gte: Int
  baseDmg: Int
  baseDmg_not: Int
  baseDmg_in: [Int!]
  baseDmg_not_in: [Int!]
  baseDmg_lt: Int
  baseDmg_lte: Int
  baseDmg_gt: Int
  baseDmg_gte: Int
  angle: Int
  angle_not: Int
  angle_in: [Int!]
  angle_not_in: [Int!]
  angle_lt: Int
  angle_lte: Int
  angle_gt: Int
  angle_gte: Int
  baseKnockBackSetKnockback: Int
  baseKnockBackSetKnockback_not: Int
  baseKnockBackSetKnockback_in: [Int!]
  baseKnockBackSetKnockback_not_in: [Int!]
  baseKnockBackSetKnockback_lt: Int
  baseKnockBackSetKnockback_lte: Int
  baseKnockBackSetKnockback_gt: Int
  baseKnockBackSetKnockback_gte: Int
  landingLag: Int
  landingLag_not: Int
  landingLag_in: [Int!]
  landingLag_not_in: [Int!]
  landingLag_lt: Int
  landingLag_lte: Int
  landingLag_gt: Int
  landingLag_gte: Int
  autoCancel: String
  autoCancel_not: String
  autoCancel_in: [String!]
  autoCancel_not_in: [String!]
  autoCancel_lt: String
  autoCancel_lte: String
  autoCancel_gt: String
  autoCancel_gte: String
  autoCancel_contains: String
  autoCancel_not_contains: String
  autoCancel_starts_with: String
  autoCancel_not_starts_with: String
  autoCancel_ends_with: String
  autoCancel_not_ends_with: String
  knockbackGrowth: Int
  knockbackGrowth_not: Int
  knockbackGrowth_in: [Int!]
  knockbackGrowth_not_in: [Int!]
  knockbackGrowth_lt: Int
  knockbackGrowth_lte: Int
  knockbackGrowth_gt: Int
  knockbackGrowth_gte: Int
  moveType: String
  moveType_not: String
  moveType_in: [String!]
  moveType_not_in: [String!]
  moveType_lt: String
  moveType_lte: String
  moveType_gt: String
  moveType_gte: String
  moveType_contains: String
  moveType_not_contains: String
  moveType_starts_with: String
  moveType_not_starts_with: String
  moveType_ends_with: String
  moveType_not_ends_with: String
  isWeightDependent: Boolean
  isWeightDependent_not: Boolean
  AND: [MovesScalarWhereInput!]
  OR: [MovesScalarWhereInput!]
  NOT: [MovesScalarWhereInput!]
}

type MovesSubscriptionPayload {
  mutation: MutationType!
  node: Moves
  updatedFields: [String!]
  previousValues: MovesPreviousValues
}

input MovesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MovesWhereInput
  AND: [MovesSubscriptionWhereInput!]
  OR: [MovesSubscriptionWhereInput!]
  NOT: [MovesSubscriptionWhereInput!]
}

input MovesUpdateInput {
  name: String
  user: CharacterUpdateOneRequiredWithoutMoveInfoInput
  hitBoxActive: String
  firstActionableFrame: Int
  baseDmg: Int
  angle: Int
  baseKnockBackSetKnockback: Int
  landingLag: Int
  autoCancel: String
  knockbackGrowth: Int
  moveType: String
  isWeightDependent: Boolean
}

input MovesUpdateManyDataInput {
  name: String
  hitBoxActive: String
  firstActionableFrame: Int
  baseDmg: Int
  angle: Int
  baseKnockBackSetKnockback: Int
  landingLag: Int
  autoCancel: String
  knockbackGrowth: Int
  moveType: String
  isWeightDependent: Boolean
}

input MovesUpdateManyMutationInput {
  name: String
  hitBoxActive: String
  firstActionableFrame: Int
  baseDmg: Int
  angle: Int
  baseKnockBackSetKnockback: Int
  landingLag: Int
  autoCancel: String
  knockbackGrowth: Int
  moveType: String
  isWeightDependent: Boolean
}

input MovesUpdateManyWithoutUserInput {
  create: [MovesCreateWithoutUserInput!]
  delete: [MovesWhereUniqueInput!]
  connect: [MovesWhereUniqueInput!]
  set: [MovesWhereUniqueInput!]
  disconnect: [MovesWhereUniqueInput!]
  update: [MovesUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [MovesUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [MovesScalarWhereInput!]
  updateMany: [MovesUpdateManyWithWhereNestedInput!]
}

input MovesUpdateManyWithWhereNestedInput {
  where: MovesScalarWhereInput!
  data: MovesUpdateManyDataInput!
}

input MovesUpdateWithoutUserDataInput {
  name: String
  hitBoxActive: String
  firstActionableFrame: Int
  baseDmg: Int
  angle: Int
  baseKnockBackSetKnockback: Int
  landingLag: Int
  autoCancel: String
  knockbackGrowth: Int
  moveType: String
  isWeightDependent: Boolean
}

input MovesUpdateWithWhereUniqueWithoutUserInput {
  where: MovesWhereUniqueInput!
  data: MovesUpdateWithoutUserDataInput!
}

input MovesUpsertWithWhereUniqueWithoutUserInput {
  where: MovesWhereUniqueInput!
  update: MovesUpdateWithoutUserDataInput!
  create: MovesCreateWithoutUserInput!
}

input MovesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  user: CharacterWhereInput
  hitBoxActive: String
  hitBoxActive_not: String
  hitBoxActive_in: [String!]
  hitBoxActive_not_in: [String!]
  hitBoxActive_lt: String
  hitBoxActive_lte: String
  hitBoxActive_gt: String
  hitBoxActive_gte: String
  hitBoxActive_contains: String
  hitBoxActive_not_contains: String
  hitBoxActive_starts_with: String
  hitBoxActive_not_starts_with: String
  hitBoxActive_ends_with: String
  hitBoxActive_not_ends_with: String
  firstActionableFrame: Int
  firstActionableFrame_not: Int
  firstActionableFrame_in: [Int!]
  firstActionableFrame_not_in: [Int!]
  firstActionableFrame_lt: Int
  firstActionableFrame_lte: Int
  firstActionableFrame_gt: Int
  firstActionableFrame_gte: Int
  baseDmg: Int
  baseDmg_not: Int
  baseDmg_in: [Int!]
  baseDmg_not_in: [Int!]
  baseDmg_lt: Int
  baseDmg_lte: Int
  baseDmg_gt: Int
  baseDmg_gte: Int
  angle: Int
  angle_not: Int
  angle_in: [Int!]
  angle_not_in: [Int!]
  angle_lt: Int
  angle_lte: Int
  angle_gt: Int
  angle_gte: Int
  baseKnockBackSetKnockback: Int
  baseKnockBackSetKnockback_not: Int
  baseKnockBackSetKnockback_in: [Int!]
  baseKnockBackSetKnockback_not_in: [Int!]
  baseKnockBackSetKnockback_lt: Int
  baseKnockBackSetKnockback_lte: Int
  baseKnockBackSetKnockback_gt: Int
  baseKnockBackSetKnockback_gte: Int
  landingLag: Int
  landingLag_not: Int
  landingLag_in: [Int!]
  landingLag_not_in: [Int!]
  landingLag_lt: Int
  landingLag_lte: Int
  landingLag_gt: Int
  landingLag_gte: Int
  autoCancel: String
  autoCancel_not: String
  autoCancel_in: [String!]
  autoCancel_not_in: [String!]
  autoCancel_lt: String
  autoCancel_lte: String
  autoCancel_gt: String
  autoCancel_gte: String
  autoCancel_contains: String
  autoCancel_not_contains: String
  autoCancel_starts_with: String
  autoCancel_not_starts_with: String
  autoCancel_ends_with: String
  autoCancel_not_ends_with: String
  knockbackGrowth: Int
  knockbackGrowth_not: Int
  knockbackGrowth_in: [Int!]
  knockbackGrowth_not_in: [Int!]
  knockbackGrowth_lt: Int
  knockbackGrowth_lte: Int
  knockbackGrowth_gt: Int
  knockbackGrowth_gte: Int
  moveType: String
  moveType_not: String
  moveType_in: [String!]
  moveType_not_in: [String!]
  moveType_lt: String
  moveType_lte: String
  moveType_gt: String
  moveType_gte: String
  moveType_contains: String
  moveType_not_contains: String
  moveType_starts_with: String
  moveType_not_starts_with: String
  moveType_ends_with: String
  moveType_not_ends_with: String
  isWeightDependent: Boolean
  isWeightDependent_not: Boolean
  AND: [MovesWhereInput!]
  OR: [MovesWhereInput!]
  NOT: [MovesWhereInput!]
}

input MovesWhereUniqueInput {
  id: ID
}

type Mutation {
  createCharacter(data: CharacterCreateInput!): Character!
  updateCharacter(data: CharacterUpdateInput!, where: CharacterWhereUniqueInput!): Character
  updateManyCharacters(data: CharacterUpdateManyMutationInput!, where: CharacterWhereInput): BatchPayload!
  upsertCharacter(where: CharacterWhereUniqueInput!, create: CharacterCreateInput!, update: CharacterUpdateInput!): Character!
  deleteCharacter(where: CharacterWhereUniqueInput!): Character
  deleteManyCharacters(where: CharacterWhereInput): BatchPayload!
  createMovements(data: MovementsCreateInput!): Movements!
  updateMovements(data: MovementsUpdateInput!, where: MovementsWhereUniqueInput!): Movements
  updateManyMovementses(data: MovementsUpdateManyMutationInput!, where: MovementsWhereInput): BatchPayload!
  upsertMovements(where: MovementsWhereUniqueInput!, create: MovementsCreateInput!, update: MovementsUpdateInput!): Movements!
  deleteMovements(where: MovementsWhereUniqueInput!): Movements
  deleteManyMovementses(where: MovementsWhereInput): BatchPayload!
  createMoves(data: MovesCreateInput!): Moves!
  updateMoves(data: MovesUpdateInput!, where: MovesWhereUniqueInput!): Moves
  updateManyMoveses(data: MovesUpdateManyMutationInput!, where: MovesWhereInput): BatchPayload!
  upsertMoves(where: MovesWhereUniqueInput!, create: MovesCreateInput!, update: MovesUpdateInput!): Moves!
  deleteMoves(where: MovesWhereUniqueInput!): Moves
  deleteManyMoveses(where: MovesWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  character(where: CharacterWhereUniqueInput!): Character
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character]!
  charactersConnection(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CharacterConnection!
  movements(where: MovementsWhereUniqueInput!): Movements
  movementses(where: MovementsWhereInput, orderBy: MovementsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movements]!
  movementsesConnection(where: MovementsWhereInput, orderBy: MovementsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MovementsConnection!
  moves(where: MovesWhereUniqueInput!): Moves
  moveses(where: MovesWhereInput, orderBy: MovesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Moves]!
  movesesConnection(where: MovesWhereInput, orderBy: MovesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MovesConnection!
  node(id: ID!): Node
}

type Subscription {
  character(where: CharacterSubscriptionWhereInput): CharacterSubscriptionPayload
  movements(where: MovementsSubscriptionWhereInput): MovementsSubscriptionPayload
  moves(where: MovesSubscriptionWhereInput): MovesSubscriptionPayload
}
`
      }
    